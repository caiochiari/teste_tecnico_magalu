import os
import streamlit as st
import google.generativeai as genai
from sqlalchemy import create_engine, text

# --- Configura√ß√£o da P√°gina do Streamlit ---
st.set_page_config(
    page_title="Magalu People Analytics IA",
    page_icon="ü§ñ",
    layout="centered"
)

# Usei o cache do Streamlit para evitar reconectar a cada intera√ß√£o
@st.cache_resource
def get_db_connection():
    """
    Cria e retorna uma conex√£o com o banco de dados PostgreSQL.
    """
    try:
        db_url = os.getenv("DATABASE_URL")
        if not db_url:
            st.error("A vari√°vel de ambiente DATABASE_URL n√£o foi definida.")
            return None
        engine = create_engine(db_url)
        connection = engine.connect()
        print("Conex√£o com o PostgreSQL estabelecida com sucesso.")
        return connection
    except Exception as e:
        st.error(f"Erro ao conectar com o banco de dados: {e}")
        return None

@st.cache_resource
def configure_ai():
    """
    Configura e retorna o modelo generativo do Google.
    """
    try:
        api_key = os.getenv("GOOGLE_API_KEY")
        if not api_key or "SUA_CHAVE_API_AQUI" in api_key:
            st.error("A chave de API do Google (GOOGLE_API_KEY) n√£o foi definida no arquivo .env.")
            return None
        genai.configure(api_key=api_key)
        print("SDK do Google Generative AI configurado com sucesso.")
        return genai.GenerativeModel('gemini-2.5-flash')
    except Exception as e:
        st.error(f"Erro ao configurar o SDK de IA: {e}")
        return None

def generate_sql_from_question(model, question, schema):
    """
    Gera uma consulta SQL a partir de uma pergunta.
    """
    prompt = f"""
    Com base no esquema da tabela PostgreSQL abaixo, sua tarefa √© gerar uma consulta SQL que responda √† pergunta do usu√°rio.
    Responda APENAS com o c√≥digo SQL. N√£o adicione texto extra, explica√ß√µes ou formata√ß√£o de markdown.

    
    **Esquema da Tabela:**
    {schema}

    **Pergunta do Usu√°rio:**
    "{question}"

    **SQL Gerado:**
    """
    try:
        response = model.generate_content(prompt)
        sql_query = response.text.strip().replace("```sql", "").replace("```", "")
        # Salva para possivel exibi√ß√£o
        st.session_state.last_sql_query = sql_query
        return sql_query
    except Exception as e:
        st.error(f"Erro ao gerar SQL: {e}")
        return None

def execute_sql_query(connection, query):
    """
    Executa a consulta SQL e retorna os resultados.
    """
    try:
        result_proxy = connection.execute(text(query))
        results = [dict(row) for row in result_proxy.mappings()]
        return results
    except Exception as e:
        st.error(f"Erro ao executar a consulta SQL: {e}")
        return None

def generate_answer_from_result(model, question, results):
    """
    Gera uma resposta em linguagem natural a partir dos resultados.
    """
    prompt = f"""
    Sua tarefa √© atuar como um assistente de People Analytics.
    Com base na pergunta original do usu√°rio e nos dados retornados do banco de dados, formule uma resposta clara, concisa e amig√°vel em portugu√™s.

    **Pergunta Original:**
    "{question}"

    **Dados do Banco de Dados (em formato JSON):**
    {results}

    **Resposta Amig√°vel:**
    """
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        st.error(f"Erro ao gerar a resposta final: {e}")
        return "Desculpe, n√£o consegui gerar uma resposta final."

# --- Interface do Chat ---
st.title("ü§ñ Assistente de People Analytics do Magalu")
st.caption("Fa√ßa perguntas sobre os dados de colaboradores e obtenha insights.")

# Inicializa o hist√≥rico do chat na sess√£o
if "messages" not in st.session_state:
    st.session_state.messages = []

# Exibe as mensagens do hist√≥rico
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        if "sql" in message:
            with st.expander("Ver consulta SQL"):
                st.code(message["sql"], language="sql")

# Obt√©m a pergunta do usu√°rio
if prompt := st.chat_input("Quais colaboradores est√£o em risco de sa√≠da?"):
    # Adiciona e exibe a mensagem do usu√°rio
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Gera e exibe a resposta do assistente
    with st.chat_message("assistant"):
        with st.spinner("Pensando..."):
            model = configure_ai()
            connection = get_db_connection()
            
            if model and connection:
                schema = """
                Tabela: gold.fato_colaborador
                Colunas:
                - id (INTEGER): Identificador √∫nico do colaborador.
                - nome (TEXT): Nome do colaborador.
                - idade (INTEGER): Idade do colaborador.
                - cargo (TEXT): Cargo atual do colaborador.
                - area (TEXT): √Årea de atua√ß√£o do colaborador.
                - data_ultima_movimentacao (DATE): Data da √∫ltima promo√ß√£o ou transfer√™ncia.
                - total_movimentacoes (BIGINT): N√∫mero total de movimenta√ß√µes na carreira.
                - logins_simulados (BIGINT): N√∫mero simulado de logins no sistema.
                - status_colaborador (TEXT): Flag que define se o funcionario est√° ativo na empresa ('Ativo', 'Desligado')
                - risco_saida (TEXT): N√≠vel de risco de sa√≠da ('Alto', 'M√©dio', 'Baixo', 'N/A (Desligado)').
                """
                
                sql_query = generate_sql_from_question(model, prompt, schema)
                
                if sql_query:
                    results = execute_sql_query(connection, sql_query)
                    if results is not None:
                        response = generate_answer_from_result(model, prompt, results)
                        st.markdown(response)
                        # Adiciona a resposta completa ao hist√≥rico
                        st.session_state.messages.append({
                            "role": "assistant", 
                            "content": response, 
                            "sql": st.session_state.get('last_sql_query', '')
                        })

