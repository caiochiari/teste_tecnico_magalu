x-airflow-common: &airflow-common
  image: apache/airflow:2.8.1-python3.9
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow-db/airflow
    AIRFLOW__DATABASE__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres-airflow-db/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: '${AIRFLOW__CORE__FERNET_KEY}'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__LOGGING__LOGGING_LEVEL: 'INFO'
    AIRFLOW_UID: '${AIRFLOW_UID}'
    AIRFLOW_GID: '${AIRFLOW_GID}'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./scripts:/opt/airflow/scripts
    - ./data:/opt/airflow/data

  networks:
    - data-network

services:
  # ------------------------------------------------------------------
  # AIRFLOW SERVICES
  # ------------------------------------------------------------------
  postgres-airflow-db:
    image: postgres:13
    container_name: postgres_airflow_db
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data-network

  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data-network

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "$${HOSTNAME}"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    container_name: airflow_worker
    command: celery worker
    healthcheck:
      test: ["CMD", "airflow", "celery", "inspect", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully
  
  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    command: >
      bash -c "
        airflow db migrate &&
        airflow users create --username ${AIRFLOW_USERNAME} --firstname ${AIRFLOW_FIRST_NAME} --lastname ${AIRFLOW_LAST_NAME} --role Admin --email ${AIRFLOW_EMAIL} --password ${AIRFLOW_PASSWORD}
      "
    depends_on:
      postgres-airflow-db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # ------------------------------------------------------------------
  # SPARK CLUSTER
  # ------------------------------------------------------------------
  spark-master:
    image: bitnami/spark:3.5
    container_name: spark_master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - '8081:8080'
      - '7077:7077'
    networks:
      - data-network

  spark-worker:
    image: bitnami/spark:3.5
    container_name: spark_worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    networks:
      - data-network

  # ------------------------------------------------------------------
  # APPLICATION SERVICES
  # ------------------------------------------------------------------
  postgres-application-db:
    image: postgres:13
    container_name: postgres_app_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_app_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data-network

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data-network

  create-buckets:
    image: minio/mc
    container_name: minio_create_buckets
    depends_on:
      minio:
        condition: service_healthy # Espera o MinIO ficar saudável
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/people-analytics;
      /usr/bin/mc policy set public myminio/people-analytics;
      exit 0;
      "
    networks:
      - data-network

  fake-api:
    build:
      context: ./api
    container_name: fake_api
    ports:
      - "5001:5000"
    networks:
      - data-network
    volumes:
      - ./data:/app/data

  ai-agent:
    build:
      context: ./ai_agent
    container_name: ai_agent
    depends_on:
      postgres-application-db:
        condition: service_healthy # Espera o banco da app ficar saudável
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-application-db:5432/${POSTGRES_DB}
    networks:
      - data-network
    stdin_open: true # Permite interação via terminal
    tty: true

networks:
  data-network:
    driver: bridge

volumes:
  postgres_app_data:
  minio_data:

