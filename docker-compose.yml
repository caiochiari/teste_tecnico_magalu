services:
  # ------------------------------------------------------------------
  # AIRFLOW SERVICES
  # ------------------------------------------------------------------
  postgres-airflow-db:
    image: postgres:13
    container_name: postgres_airflow_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - airflow-db-data:/var/lib/postgresql/data
    networks:
      - data-network

  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - airflow-redis-data:/data
    networks:
      - data-network

  x-airflow-common: &airflow-common
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-airflow-db/${POSTGRES_DB}
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-airflow-db/${POSTGRES_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/1
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__LOGGING__LOGGING_LEVEL: 'INFO'
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      AIRFLOW_CONN_SPARK_DEFAULT: ${AIRFLOW_CONN_SPARK_DEFAULT}
      AIRFLOW__SPARK__CONF: '{"spark.driver.host": "airflow-worker"}'
      AIRFLOW_UID: '${AIRFLOW_UID}'
      AIRFLOW_GID: '${AIRFLOW_GID}'
      POSTGRES_APP_DB: ${POSTGRES_APP_DB}
      POSTGRES_APP_USER: ${POSTGRES_APP_USER}
      POSTGRES_APP_PASSWORD: ${POSTGRES_APP_PASSWORD}
      POSTGRES_APP_HOST: ${POSTGRES_APP_HOST}
      POSTGRES_APP_PORT: ${POSTGRES_APP_PORT}
      MINIO_BUCKET: ${MINIO_BUCKET}
      API_URL: ${API_URL}
      CSV_PATH: ${CSV_PATH}

    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
    user: "${AIRFLOW_UID:-50000}"
    networks:
      - data-network

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    container_name: airflow_worker
    command: celery worker
    healthcheck:
      test: ["CMD-SHELL", 'airflow celery health_check']
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-scheduler:
        condition: service_healthy
      redis:
        condition: service_healthy

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    command:
      - "bash"
      - "-c"
      - "airflow db migrate && airflow users create -u admin -p admin -r Admin -e admin@example.com -f admin -l user"
    user: "0"
    depends_on:
      postgres-airflow-db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # ------------------------------------------------------------------
  # SPARK CLUSTER
  # ------------------------------------------------------------------
  spark-master:
    image: bitnami/spark:3.3.0
    container_name: spark_master
    environment:
      - SPARK_MODE=master
    ports:
      - "8081:8081"
      - "7077:7077"
    networks:
      - data-network

  spark-worker:
    image: bitnami/spark:3.3.0
    container_name: spark_worker_1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    networks:
      - data-network

  # ------------------------------------------------------------------
  # APPLICATION SERVICES
  # ------------------------------------------------------------------
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - data-network

  create-buckets:
    image: minio/mc
    container_name: minio_create_buckets
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/people-analytics || true;
      /usr/bin/mc policy set public myminio/people-analytics;
      exit 0;
      "
    networks:
      - data-network

  postgres-application-db:
    image: postgres:13
    container_name: postgres_app_db
    environment:
      - POSTGRES_USER=${POSTGRES_APP_USER}
      - POSTGRES_PASSWORD=${POSTGRES_APP_PASSWORD}
      - POSTGRES_DB=${POSTGRES_APP_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_app_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_APP_USER} -d ${POSTGRES_APP_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data-network

  fake-api:
    build:
      context: ./api
    container_name: fake_api
    ports:
      - "5001:5000"
    volumes:
      - ./data:/app/data
    networks:
      - data-network

  ai-agent:
    build:
      context: ./ai_agent
    container_name: ai_agent
    ports:
      - "8501:8501"
    depends_on:
      postgres-application-db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_APP_USER}:${POSTGRES_APP_PASSWORD}@postgres-application-db:5432/${POSTGRES_APP_DB}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    networks:
      - data-network

volumes:
  airflow-db-data:
  airflow-redis-data:
  minio-data:
  postgres_app_data:

networks:
  data-network:
    driver: bridge